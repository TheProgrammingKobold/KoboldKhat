#ifdef _WIN32
	#define WIN32_LEAN_AND_MEAN
	#include <windows.h>
#endif

#define ASIO_STANDALONE
#include <asio.hpp>
#include <thread> 
#include <iostream> 
#include <vector>
#include <memory>
#include <string>

using asio::ip::tcp;

struct Client 
{
	std::shared_ptr<tcp::socket> socket;
	std::string username;
};

class ChatServer
{
public:
	ChatServer(asio::io_context& context, short port)
		: m_acceptor(context, tcp::endpoint(tcp::v4(), port))
	{
		acceptConnections();
	}

private:

	void acceptConnections()
	{
		auto socket = std::make_shared<tcp::socket>(m_acceptor.get_executor());
		m_acceptor.async_accept(*socket, [this, socket](std::error_code ec)
				{
				
					if (m_clients.size() > 10)
					{
						std::cout << "Warning: Client tried to connect with max clients connected, dropping connection...\n";
						acceptConnections();
					}

					if (!ec)
					{
						std::cout << "New Client Connected!" << std::endl;
						m_clients.push_back(socket);
						readMessages(socket);
					}
					acceptConnections();
				});
	}

	void readMessages(std::shared_ptr<tcp::socket> socket)
	{
		auto buffer = std::make_shared<std::array<char, 1024>>();
		socket->async_read_some(asio::buffer(*buffer), [this, socket, buffer](std::error_code ec, std::size_t length)
				{
					if (!ec)
					{
						std::string message(buffer->data(), length);
						std::cout << "Received: " << message << '\n';
						broadcastMessage(message, socket);
						readMessages(socket);
					}
				});
	}

	void broadcastMessage(const std::string& message, std::shared_ptr<tcp::socket> sender)
	{
		for (auto& client : m_clients)
		{
			if (client != sender)
			{
				asio::async_write(*client, asio::buffer(message), [](std::error_code, std::size_t) {}); 
			}
		}
	}

private:

	tcp::acceptor m_acceptor;
	std::vector<std::shared_ptr<tcp::socket>> m_clients;

};



int main()
{	
	try 
	{
		asio::io_context context;
		ChatServer server(context, 12345);
		context.run();
	}
	catch (const std::exception& e) 
	{
		std::cerr << "ERROR: " << e.what() << '\n';
	}

	return 0;
}
